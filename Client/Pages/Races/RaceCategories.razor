@using System.ComponentModel.DataAnnotations
@inject GrpcChannel channel
@inject IRaceSvc raceSvc

@if (Error != null)
{
	<div class="alert alert-danger">@Error</div>
}
@if (Categories == null)
{
	<LoadingSpinner />
}
else
{
	<table class="table table-striped table-hover table-bordered">
		<thead>
			<tr>
				<th>Код</th>
				<th>Название</th>
				<th>Пол</th>
				<th>Годы</th>
				<th />
			</tr>
		</thead>
		<tbody>
			@foreach (var cat in Categories)
			{
				var category = cat;
				<tr @key="@cat.Id">
					<td>@cat.Code</td>
					<td>@cat.Name</td>
					<td>@Utils.FormatSex(cat.Sex)</td>
					<td>@($"{cat.MinYearOfBirth?.ToString() ?? ""} - {cat.MaxYearOfBirth?.ToString() ?? ""}")</td>
					<td>
						<div class="btn-group">
							<button class="btn btn-outline-primary" @onclick="() => EditCategory(category)" >Изменить</button>
							<button class="btn btn-outline-danger" @onclick="() => DeleteCategory(category.Id)" >Удалить</button>
						</div>
					</td>

				</tr>
			}
		</tbody>
	</table>
	@if (EditModel == null)
	{
		<button class="btn btn-outline-primary" @onclick="@(() => EditCategory(null))">Добавить категорию</button>
	}
	else
	{
		<EditForm Model="@EditModel" OnValidSubmit="@SaveCategory" class="bg-light p-3">
			<DataAnnotationsValidator />

			@if (EditModel.Id > 0)
			{
				<h3>Изменение категории</h3>
			}
			else
			{
				<h3>Добавление категории</h3>
			}
			<div class="form-row">
				<div class="form-group col-1">
					<label for="name">Код</label>
					<InputText id="name" @bind-Value="EditModel.Code" class="form-control" DisplayName="Код" />
					<ValidationMessage For="@(() => EditModel.Code)" />
				</div>
				<div class="form-group col-4">
					<label for="name">Название</label>
					<InputText Name="name" @bind-Value="EditModel.Name" class="form-control" DisplayName="Название" />
					<ValidationMessage For="@(() => EditModel.Name)" />
				</div>
				<div class="form-group col-3">
					<label for="sex">Пол</label>
					<div>
						<InputRadioGroup id="sex" @bind-Value="EditModel.Sex">
							<div class="form-check form-check-inline">
								<InputRadio id="sexany" Value="Proto.Sex.Any" class="form-check-input"></InputRadio>
								<label class="form-check-label" for="sexany">Любой</label>
							</div>
							<div class="form-check form-check-inline">
								<InputRadio Value="Proto.Sex.Male" id="sexm" class="form-check-input" />
								<label class="form-check-label" for="sexm">Муж</label>
							</div>
							<div class="form-check form-check-inline">
								<InputRadio Value="Proto.Sex.Female" id="sexf" class="form-check-input" />
								<label class="form-check-label" for="sexf">Жен</label>
							</div>
						</InputRadioGroup>
					</div>
				</div>
				<div class="form-group col-2">
					<label for="minYearOfBirth">Г.р. мин</label>
					<InputNumber min="1900" max="@(DateTime.Now.Year)" @bind-Value="EditModel.MinYearOfBirth" class="form-control" />
					<ValidationMessage For="@(() => EditModel.MinYearOfBirth)" />
				</div>
				<div class="form-group col-2">
					<label for="minYearOfBirth">Г.р. макс</label>
					<InputNumber min="1900" max="@(DateTime.Now.Year)" @bind-Value="EditModel.MaxYearOfBirth" class="form-control" />
					<ValidationMessage For="@(() => EditModel.MaxYearOfBirth)" />
				</div>
			</div>
			<div class="form-row">
				<button class="btn btn-primary" type="submit">Сохранить</button>
				<button class="btn btn-outline-primary" @onclick="@(()=> EditModel = null)">Отмена</button>
			</div>
		</EditForm>
	}
}

@code {
	[Parameter]
	public int RaceId { get; set; }

	ICollection<Proto.RaceCategory> Categories;
	string Error;

	protected override async Task OnInitializedAsync()
	{
		if (RaceId <= 0)
		{
			Error = $"RaceId {RaceId}";
		}
		else 
		{
			await LoadCategories();
		}
	}

	async Task LoadCategories()
	{
		try
		{
			Categories = await raceSvc.GetRaceCategories(RaceId);
		}
		catch (Exception ex)
		{
			Error = ex.ToString();
		}
		StateHasChanged();
	}

	void EditCategory(Proto.RaceCategory category)
	{
		EditModel = new RaceCategoryEditModel
		{
			Id = category?.Id ?? 0,
			Name = category?.Name,
			Code = category?.Code,
			MaxYearOfBirth = category?.MaxYearOfBirth,
			MinYearOfBirth = category?.MinYearOfBirth,
			Sex = category?.Sex ?? Proto.Sex.Any
		};
	}

	async Task DeleteCategory(int categoryId)
	{
		try
		{
			var client = new Proto.RaceCategories.RaceCategoriesClient(channel);
			await client.deleteAsync(new Proto.DeleteCategoryRequest { RaceCategoryId = categoryId });
			_ = LoadCategories();
		}
		catch (Exception ex)
		{
			Error = ex.ToString();
		}

	}

	async Task SaveCategory()
	{
		try
		{
			var category = new Proto.RaceCategory
			{
				Code = EditModel.Code,
				Id = EditModel.Id,
				MaxYearOfBirth = EditModel.MaxYearOfBirth,
				MinYearOfBirth = EditModel.MinYearOfBirth,
				Name = EditModel.Name,
				Sex = EditModel.Sex
			};
			var client = new Proto.RaceCategories.RaceCategoriesClient(channel);
			if (EditModel.Id == 0)
			{
				var raceId = RaceId;
				await client.addAsync(new Proto.AddRaceCategoryRequest { RaceId = raceId, Category = category });
			}
			else
			{
				await client.updateAsync(category);
			}
			EditModel = null;
			_ = LoadCategories();
		}
		catch (Exception ex)
		{
			Error = ex.ToString();
		}
	}
	RaceCategoryEditModel EditModel;

	class RaceCategoryEditModel
	{
		public int Id { get; set; }

		[Required(ErrorMessage = "Код обязателен"), StringLength(3, ErrorMessage = "Максимум 3 символа")]
		public string Code { get; set; }

		[Required(ErrorMessage = "Название обязательно")]
		public string Name { get; set; }

		public Proto.Sex Sex { get; set; }

		[LessThan(nameof(MaxYearOfBirth), ErrorMessage = "Должен быть меньше Макс")]
		public int? MinYearOfBirth { get; set; }

		[GreaterThan(nameof(MinYearOfBirth), ErrorMessage = "Должен быть больше Мин")]
		public int? MaxYearOfBirth { get; set; }
	}
}