@page "/races/edit"
@page "/races/edit/{paramRaceId}"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject IRaceSvc svc

<div class="container">
	<h1>
		@(RaceId > 0 ? "Редактирование" + Model?.Name : "Добавление гонки")
	</h1>
	@if (Error != null)
	{
		<div class="alert alert-danger">@Error</div>
	}
	@if (Model == null)
	{
		<LoadingSpinner />
	}
	else
	{
		<EditForm Model="@Model" OnValidSubmit="@OnSubmit">
			<DataAnnotationsValidator />
			<ValidationSummary />
			<div class="form-group">
				<label for="name">Дата</label>
				<InputDate id="name" @bind-Value="Model.Date" class="form-control" DisplayName="Дата" />
				<ValidationMessage For="@(() => Model.Date)" />
			</div>
			<div class="form-group">
				<label for="name">Название</label>
				<InputText id="name" @bind-Value="Model.Name" class="form-control" DisplayName="Название"
						   />
				<ValidationMessage For="@(() => Model.Name)" />
			</div>
			<div class="form-group">
				<label for="description">Описание</label>
				<InputTextArea id="description" @bind-Value="Model.Description" class="form-control" />
			</div>
			<button type="submit" class="btn btn-primary" disabled="@IsUpdating">
				@if (IsUpdating)
				{
					<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
				}
				@(RaceId > 0 ? "Сохранить" : "Добавить" )
			</button>
			<button type="button" class="btn btn-secondary" @onclick="@GoBack">Отмена</button>
		</EditForm>
	}
</div>

@code {
	[Parameter]
	public string? ParamRaceId { get; set; }

	private RaceEditModel? Model;
	private bool IsUpdating = false;
	private string? Error;

	protected int? RaceId
	{
		get
		{
			return !string.IsNullOrWhiteSpace(ParamRaceId) &&
				int.TryParse(ParamRaceId, out var raceId) ? raceId : null;
		}
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			if (RaceId > 0)
			{
				var race = await svc.GetRace(RaceId.Value);
				Model = new RaceEditModel
				{
					Id = RaceId.Value,
					Name = race.Name,
					Date = race.Date.ToDateTimeOffset(),
					Description = race.Description
				};
			}
			else
			{
				Model = new RaceEditModel()
				{
					Date = DateTimeOffset.Now,
					Description = string.Empty,
					Name = string.Empty
				};
			}
		}
		catch (Exception ex)
		{
			Error = ex.ToString();
		}
	}

	protected async Task OnSubmit()
	{

		try
		{
			if (Model == null) throw new ArgumentNullException("Model is null");
			IsUpdating = true;
			await Task.Delay(1000); // TODO: remove

			var date = new DateTime(Model.Date.Year, Model.Date.Month, Model.Date.Day, 0, 0, 0, DateTimeKind.Utc); // midnight UTC
			await svc.UpdateRace(new Proto.Race
			{
				Id = Model.Id,
				Date = Google.Protobuf.WellKnownTypes.Timestamp.FromDateTime(date),
				Name = Model.Name,
				Description = Model.Description ?? string.Empty
			});
			GoBack();
		}
		catch (Exception ex)
		{
			Error = ex.ToString();
		}
		finally
		{
			IsUpdating = false;
		}
	}

	protected void GoBack()
	{
		NavigationManager.NavigateTo("..");
	}

	public class RaceEditModel
	{
		public int Id { get; set; }

		[Required(ErrorMessage = "Название обязательно")]
		[StringLength(50, ErrorMessage = "Слишком длинное")]
		public string Name { get; set; } = "";

		public string Description { get; set; } = "";
		[Required]
		public DateTimeOffset Date { get; set; }
	}
}