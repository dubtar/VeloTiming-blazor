@page "/Results/{Id:int}"
@inject IRaceSvc raceSvc

<div class="container">
    @if (error != null)
    {
        <div class="alert alert-danger">@error</div>
    }

    @if (start == null)
    {
        <LoadingSpinner/>
    }
    else
    {
        <h1>
            @start.RaceName <small>@start.RealStart?.ToDateTime().ToShortDateString()</small>
        </h1>
        <h2>
            @start.Name <small>@start.RealStart?.ToDateTime().ToLocalTime().ToShortTimeString()</small>
        </h2>
        <table class="table table-striped table-hover">
            <thead>
            <tr>
                <th>Круг</th>
                <th>Место</th>
                <th>Время</th>
                <th>Номер</th>
                <th>Гонщик</th>
                <th>&nbsp;</th>
            </tr>
            </thead>
            <tbody>
            @if (results != null)
            {
                @foreach (var mark in results)
                {
                    <tr key=@mark.Id>
                        <td>@mark.Lap</td>
                        <td>@mark.Place</td>
                        <td>@Utils.FormatTime(mark.Time?.ToDateTime(), start.RealStart?.ToDateTime())</td>
                        <td>@mark.Number</td>
                        <td>@mark.Rider</td>
                        <td>
                            <small>@Utils.FormatTime(mark.Time ?? mark.CreatedOn)</small>
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>
    }
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    string? error;
    Proto.Result[]? results;
    Proto.Start? start;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var res = await raceSvc.GetStartResults(Id);
            start = res.Start;
            results = res.Results.ToArray();
        }
        catch (Exception ex)
        {
            error = ex.ToString();
        }
    }

}