@using System.ComponentModel.DataAnnotations
@inject GrpcChannel channel
@inject IRaceSvc raceSvc
@inject IJSRuntime jsRuntime

<div @onkeydown="OnKeyDown" tabindex="0">
	@if (Error != null)
	{
		<div class="alert alert-danger">@Error</div>
	}
	@if (RidersList == null)
	{
		<LoadingSpinner />
	}
	else
	{
		@if (EditModel == null)
		{
			<button class="btn btn-outline-primary my-3" @onclick="@(() => EditRider(null))">Добавить участника (Ins)</button>
		}
		else
		{
			<EditForm Model="@EditModel" OnValidSubmit="@SaveRider" class="bg-light p-3">
				<DataAnnotationsValidator />

				@if (EditModel.Id > 0)
				{
					<h3>Изменение гонщика</h3>
				}
				else
				{
					<h3>Добавление гонщика</h3>
				}
				<div class="form-row">
					<div class="form-group col-1">
						<label for="number">Номер</label>
						<InputText id="number" @bind-Value="EditModel.Number" class="form-control" DisplayName="Номер" autoFocus="True" />
						<ValidationMessage For="@(() => EditModel.Number)" />
					</div>
					<div class="form-group col-2">
						<label for="lastname">Фамилия</label>
						<InputText Name="lastname" @bind-Value="EditModel.LastName" class="form-control" DisplayName="Фамилия" />
						<ValidationMessage For="@(() => EditModel.LastName)" />
					</div>
					<div class="form-group col-2">
						<label for="firstname">Имя</label>
						<InputText Name="firstname" @bind-Value="EditModel.FirstName" class="form-control" DisplayName="Имя" />
						<ValidationMessage For="@(() => EditModel.FirstName)" />
					</div>
					<div class="form-group col-1">
						<label for="sex">Пол</label>
						<div>
							<InputRadioGroup id="sex" @bind-Value="EditModel.Sex">
								<div class="form-check form-check-inline">
									<InputRadio Value="Proto.Sex.Male" id="sexm" class="form-check-input" />
									<label class="form-check-label" for="sexm">М</label>
								</div>
								<div class="form-check form-check-inline">
									<InputRadio Value="Proto.Sex.Female" id="sexf" class="form-check-input" />
									<label class="form-check-label" for="sexf">Ж</label>
								</div>
							</InputRadioGroup>
						</div>
					</div>
					<div class="form-group col-1">
						<label for="YearOfBirth">Г.р.</label>
						<InputNumber name="YearOfBirth" min="1900" max="@(DateTime.Now.Year)" @bind-Value="EditModel.YearOfBirth" class="form-control" DisplayName="Год рождения" />
						<ValidationMessage For="@(() => EditModel.YearOfBirth)" />
					</div>
					<div class="form-group col-2">
						<label for="category">Категория</label>
						<InputSelect @bind-Value="EditModel.Category" class="form-control">
							<option value=""></option>
							@foreach (var cat in Categories)
									{
								<option @key="cat.Id" value="@cat.Code">@cat.Name</option>
									}
						</InputSelect>
					</div>
					<div class="form-group col-1">
						<label for="city">Город</label>
						<InputText name="city" @bind-Value="EditModel.City" class="form-control" DisplayName="Город" />
						<ValidationMessage For="@(() => EditModel.City)" />
					</div>
					<div class="form-group col-2">
						<label for="team">Команда</label>
						<InputText name="team" @bind-Value="EditModel.Team" class="form-control" DisplayName="Команда" />
						<ValidationMessage For="@(() => EditModel.Team)" />
					</div>
				</div>
				<div class="form-row">
					<button class="btn btn-primary" type="submit">@(EditModel.Id == 0 ? "Добавить" : "Сохранить")</button>
					<button class="btn btn-secondary ml-3" @onclick="@(()=> EditModel = null)">Отмена</button>
				</div>
			</EditForm>
		}

		<table class="table table-striped table-hover table-bordered">
			<thead>
				<tr>
					<th />
					<th>Номер</th>
					<th>Имя</th>
					<th>Пол</th>
					<th>Г.р.</th>
					<th>Возр.</th>
					<th>Кат.</th>
					<th>Город</th>
					<th>Команда</th>
					<th />
				</tr>
			</thead>
			<tbody>
				@for (var i = 0; i < RidersList.Count; i++)
				{
					var rider = RidersList[i];
					<tr @key="rider.Id">
						<td>@(i+1)</td>
						<td>@rider.Number</td>
						<td>@rider.LastName @rider.FirstName</td>
						<td>@Utils.FormatSex(rider.Sex, anyAsEmpty: true)</td>
						<td>@rider.YearOfBirth</td>
						<td>@(rider.YearOfBirth != null ? (DateTime.Now.Year - rider.YearOfBirth).ToString() : "")</td>
						<td>@rider.Category</td>
						<td>@rider.City</td>
						<td>@rider.Team</td>
						<td>
							<div class="btn-group">
								<button class="btn btn-primary" @onclick="() => EditRider(rider)">Изменить</button>
								<button class="btn btn-outline-danger" @onclick="() => DeleteRider(rider.Id)">Удалить</button>
							</div>
						</td>

					</tr>
				}
			</tbody>
		</table>
	}
</div>

@code {
	[Parameter]
	public int RaceId { get; set; }


	IList<Proto.Rider> RidersList;
	IList<Proto.RaceCategory> Categories { get; set; }
	string Error;

	protected override async Task OnInitializedAsync()
	{
		if (RaceId <= 0)
		{
			Error = $"RaceId {RaceId}";
		}
		else
		{
			await LoadRiders();
		}
	}

	async Task LoadRiders()
	{
		try
		{
			var client = new Proto.Riders.RidersClient(channel);
			var response = client.getByRaceAsync(new Proto.GetRidersByRaceRequest { RaceId = RaceId });
			var catResponse = raceSvc.GetRaceCategories(RaceId);
			RidersList = (await response).Riders;
			Categories = (await catResponse);
		}
		catch (Exception ex)
		{
			Error = ex.ToString();
		}
		StateHasChanged();
	}

	private void EditRider(Proto.Rider rider)
	{
		EditModel = new RiderEditModel
		{
			Id = rider?.Id ?? 0,
			Number = rider?.Number ?? "",
			Category = rider?.Category ?? "",
			City = rider?.City ?? "",
			FirstName = rider?.FirstName ?? "",
			LastName = rider?.LastName ?? "",
			Sex = rider?.Sex ?? Proto.Sex.Any,
			Team = rider?.Team ?? "",
			YearOfBirth = rider?.YearOfBirth
		};
	}

	private async Task DeleteRider(int riderId)
	{
		try
		{
			var client = new Proto.Riders.RidersClient(channel);
			await client.deleteAsync(new Proto.DeleteRiderRequest { RiderId = riderId });
			_ = LoadRiders();
		}
		catch (Exception ex)
		{
			Error = ex.ToString();
		}
	}

	async Task SaveRider()
	{
		try
		{
			var rider = new Proto.Rider
			{
				Id = EditModel.Id,
				Number = EditModel.Number ?? "",
				YearOfBirth = EditModel.YearOfBirth,
				LastName = EditModel.LastName,
				FirstName = EditModel.FirstName,
				Sex = EditModel.Sex,
				Category = EditModel.Category ?? "",
				City = EditModel.City ?? "",
				Team = EditModel.Team ?? ""
			};
			var client = new Proto.Riders.RidersClient(channel);
			if (EditModel.Id == 0)
			{
				var raceId = RaceId;
				await client.addAsync(new Proto.AddRiderRequest { RaceId = raceId, Rider = rider });
			}
			else
			{
				await client.updateAsync(rider);
			}
			EditModel = null;
			_ = LoadRiders();
		}
		catch (Exception ex)
		{
			Error = ex.ToString();
		}
	}

	RiderEditModel EditModel;

	class RiderEditModel
	{
		public int Id { get; set; }

		public string Number { get; set; } = "";

		[Required(ErrorMessage = "Имя обязательно")]
		public string FirstName { get; set; }

		[Required(ErrorMessage = "Фамилия обязательна")]
		public string LastName { get; set; }

		public Proto.Sex Sex { get; set; }

		[YearRange(1900, ErrorMessage = "Год рождения некорректный")]
		public int? YearOfBirth { get; set; }

		public string Category { get; set; } = "";
		public string City { get; set; } = "";
		public string Team { get; set; } = "";
	}

	private void OnKeyDown(KeyboardEventArgs args)
	{
		if (args.Key == "Insert" && RidersList != null && EditModel == null)
		{
			EditRider(null);
		}
	}
}
