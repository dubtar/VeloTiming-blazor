@using System.ComponentModel.DataAnnotations
@inject GrpcChannel channel
@inject IRaceSvc raceSvc
@inject IJSRuntime jsRuntime
@implements IDisposable

<div tabindex="0">
	@if (Error != null)
	{
		<div class="alert alert-danger">@Error</div>
	}
	@if (RidersList == null)
	{
		<LoadingSpinner />
	}
	else
	{
		@if (EditModel == null)
		{
			<button class="btn btn-outline-primary my-3" @onclick="@(() => EditRider(null))">Добавить участника (Ins)</button>
			<button class="btn btn-secondary float-right" @onclick="@ShowImport">Импорт участников</button>
		}
		else
		{
			<RiderEdit EditModel="@EditModel"/>
		}
		<ImportRiders @ref="importRiders" RaceId="RaceId" OnImported="@(async () => await LoadRiders())" />

		<table class="table table-striped table-hover table-bordered">
			<thead>
				<tr>
					<th />
					<th>Номер</th>
					<th>Имя</th>
					<th>Пол</th>
					<th>Г.р.</th>
					<th>Возр.</th>
					<th>Кат.</th>
					<th>Город</th>
					<th>Команда</th>
					<th />
				</tr>
			</thead>
			<tbody>
				@for (var i = 0; i < RidersList.Count; i++)
				{
					var rider = RidersList[i];
					<tr @key="rider.Id">
						<td>@(i+1)</td>
						<td>@rider.Number</td>
						<td>@rider.LastName @rider.FirstName</td>
						<td>@Utils.FormatSex(rider.Sex, anyAsEmpty: true)</td>
						<td>@rider.YearOfBirth</td>
						<td>@(rider.YearOfBirth != null ? (DateTime.Now.Year - rider.YearOfBirth).ToString() : "")</td>
						<td>@rider.Category</td>
						<td>@rider.City</td>
						<td>@rider.Team</td>
						<td>
							<div class="btn-group">
								<button class="btn btn-primary" @onclick="() => EditRider(rider)">Изменить</button>
								<button class="btn btn-outline-danger" @onclick="() => DeleteRider(rider.Id)">Удалить</button>
							</div>
						</td>

					</tr>
				}
			</tbody>
		</table>
	}
</div>

@code {
	[Parameter]
	public int RaceId { get; set; }


	IList<Proto.Rider>? RidersList;
	IList<Proto.RaceCategory>? Categories;
	string? Error;
	ImportRiders? importRiders;

	//TODO: subscribe to rfid signalR and set number for edited rider
	protected override async Task OnInitializedAsync()
	{
		KeyboardHandler.OnDocumentKeyDown += OnKeyDown;

		if (RaceId <= 0)
		{
			Error = $"RaceId {RaceId}";
		}
		else
		{
			await LoadRiders();
		}
	}

	public void Dispose()
	{
		KeyboardHandler.OnDocumentKeyDown -= OnKeyDown;
	}

	async Task LoadRiders()
	{
		try
		{
			var client = new Proto.Riders.RidersClient(channel);
			var response = client.getByRaceAsync(new Proto.GetRidersByRaceRequest { RaceId = RaceId });
			var catResponse = raceSvc.GetRaceCategories(RaceId);
			RidersList = (await response).Riders;
			Categories = (await catResponse);
		}
		catch (Exception ex)
		{
			Error = ex.ToString();
		}
		StateHasChanged();
	}

	private void EditRider(Proto.Rider? rider)
	{
		EditModel = new RiderEditModel
		{
			Id = rider?.Id ?? 0,
			Number = rider?.Number ?? "",
			Category = rider?.Category ?? "",
			City = rider?.City ?? "",
			FirstName = rider?.FirstName ?? "",
			LastName = rider?.LastName ?? "",
			Sex = rider?.Sex ?? Proto.Sex.Any,
			Team = rider?.Team ?? "",
			YearOfBirth = rider?.YearOfBirth
		};
		EditModel.OnYearChange += OnYearChange;
	}

	private async Task DeleteRider(int riderId)
	{
		try
		{
			var client = new Proto.Riders.RidersClient(channel);
			await client.deleteAsync(new Proto.DeleteRiderRequest { RiderId = riderId });
			_ = LoadRiders();
		}
		catch (Exception ex)
		{
			Error = ex.ToString();
		}
	}

	async Task SaveRider()
	{
		try
		{
			if (EditModel == null) throw new ArgumentNullException("EditModel is null");
			var rider = new Proto.Rider
			{
				Id = EditModel.Id,
				Number = EditModel.Number ?? "",
				YearOfBirth = EditModel.YearOfBirth,
				LastName = EditModel.LastName,
				FirstName = EditModel.FirstName,
				Sex = EditModel.Sex,
				Category = EditModel.Category ?? "",
				City = EditModel.City ?? "",
				Team = EditModel.Team ?? ""
			};
			var client = new Proto.Riders.RidersClient(channel);
			if (EditModel.Id == 0)
			{
				var raceId = RaceId;
				await client.addAsync(new Proto.AddRiderRequest { RaceId = raceId, Rider = rider });
			}
			else
			{
				await client.updateAsync(rider);
			}
			EditModel = null;
			_ = LoadRiders();
		}
		catch (Exception ex)
		{
			Error = ex.ToString();
		}
	}

	RiderEditModel? EditModel;


	private void OnYearChange(object? _, EventArgs __)
	{
		if (EditModel == null || !string.IsNullOrEmpty(EditModel.Category) ||
			EditModel.YearOfBirth == null || EditModel.YearOfBirth < 1900 ||
			EditModel.YearOfBirth > DateTime.Now.Year ||
			Categories == null)
			return;
		var category = Categories.FirstOrDefault(c =>
			(c.MinYearOfBirth != null || c.MaxYearOfBirth != null) && // only categories with years
			(c.Sex == Proto.Sex.Any || c.Sex == Utils.ToEditModel.Sex) &&
			(c.MinYearOfBirth == null || c.MinYearOfBirth <= EditModel.YearOfBirth) &&
			(c.MaxYearOfBirth == null || c.MaxYearOfBirth >= EditModel.YearOfBirth)
		);
		if (category != null)
		{
			EditModel.Category = category.Code;
		}
	}

	private void OnKeyDown(object? _, KeyboardEvent args)
	{
		if (args.Key == "Insert" && RidersList != null && EditModel == null)
		{
			EditRider(null);
			StateHasChanged();
		}
	}
	private void ShowImport()
	{
		importRiders?.Show();
	}
}
