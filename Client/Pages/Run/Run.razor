@implements IAsyncDisposable
@page "/run"
@inject IRaceSvc svc

@if (race == null)
{
	<div class="container">Нет активного старта</div>
}
else
{
	<div class="container flex-fill">
		<div class="d-flex h-100 flex-column">
			<div class="d-flex justify-content-between">
				<h1>@race.Racename @race.StartName</h1>
				@if (race.StartTime != null) {
					<Timer StartTime="@race.StartTime.ToDateTime()"/>
				}
			</div>
			<div class="flex-fill">
				<div class="d-flex justify-content-between">
					@if (race.StartTime == null)
					{
						<button @onclick="@StartRace" class="btn btn-primary m-3">Начать гонку</button>
					}
					 <!--TODO: TimeTrialButtons -->
				</div>
				@if (race.StartType == Proto.StartType.Laps)
				{
					<div>
						<LapsTable />
					</div>
				}
				<!-- TODO: TimeTrialTable -->
			</div>
			<div class="bg-light">
				@if (number != null)
				{
					<div class="d-inline-block border border-secondary rounded p-3">
						@number
					</div>
				}
				<div class="text-muted">Space - отметка времени, цифры - ввод номера, Enter - запись введённого номера</div>
			</div>
		</div>
	</div>
}

@code {
	const string SOURCE = "UI";

	Proto.RaceInfo? race;
	IDisposable? raceSubscription;
	string? number;


	protected override Task OnInitializedAsync()
	{
		KeyboardHandler.OnDocumentKeyDown += OnKeyDown;
		raceSubscription = svc.GetRaceInfoSubject().Subscribe(r =>
		{
			race = r;
			StateHasChanged();
		});
		return Task.CompletedTask;
	}

	public ValueTask DisposeAsync()
	{
		KeyboardHandler.OnDocumentKeyDown -= OnKeyDown;
		raceSubscription?.Dispose();
		return ValueTask.CompletedTask;
	}
	private void StartRace()
	{
		if (race != null)
			svc.MakeStart(race.StartId);
	}

	private void OnKeyDown(object? _, KeyboardEvent args)
	{
		if (race == null || args.Repeat) return;
		switch(args.Key)
		{
			case " ":
			case "Space":
				svc.AddTime(SOURCE);
				break;
			case var k when k?.Length > 0 && k[0] >= '0' && k[0] <= '9': // digit
				number = (number ?? "") + k;
				StateHasChanged();
				break;
			case "Backspace":
			case "Delete":
				if (!string.IsNullOrEmpty(number))
				{
					number = number.Substring(0, number.Length - 1);
					StateHasChanged();
				}
				break;
			case "Enter":
				if (!string.IsNullOrEmpty(number))
				{
					svc.AddNumber(number, SOURCE);
					number = null;
					StateHasChanged();
				}
				break;
		}
	}
}
